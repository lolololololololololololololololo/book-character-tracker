import{d as e}from"./index-lvCD0g3k.js";class p{static async updateChapterBoundariesSafe(o,t){console&&console.log&&console.log("SafeBookOperations: Starting safe chapter boundary update for:",o);try{let a=await e.books.get(o);if(!a)throw new Error(`Book with ID ${o} not found`);const r=a.fileName,n=await e.books.where("fileName").equals(r).toArray();if(console&&console.log&&console.log("SafeBookOperations: Found",n.length,"books with filename:",r),n.length>1)for(const s of n)s.id!==o&&(console&&console.log&&console.log("SafeBookOperations: Removing duplicate book:",s.id),await e.books.delete(s.id),await e.characters.where("bookId").equals(s.id).delete());if(a=await e.books.get(o),!a)throw new Error(`Book disappeared during cleanup: ${o}`);const i={...a,chapterBoundaries:[...t],totalChapters:t.length,id:o};if(await e.transaction("rw",e.books,async()=>{await e.books.delete(o),await e.books.add(i)}),!await e.books.get(o))throw new Error("Book verification failed after update");const c=await e.books.where("fileName").equals(r).toArray();if(c.length>1){console&&console.warn&&console.warn("SafeBookOperations: Duplicates detected after update, final cleanup...");for(const s of c)s.id!==o&&await e.books.delete(s.id)}console&&console.log&&console.log("SafeBookOperations: Chapter boundary update completed successfully")}catch(a){throw console&&console.error&&console.error("SafeBookOperations: Update failed:",a),a}}static async getBookCountByFilename(o){try{return(await e.books.where("fileName").equals(o).toArray()).length}catch{return 0}}static async emergencyCleanup(){console&&console.log&&console.log("SafeBookOperations: Starting emergency cleanup...");try{const o=await e.books.toArray(),t=new Map;for(const a of o)t.has(a.fileName)||t.set(a.fileName,[]),t.get(a.fileName).push(a);for(const[a,r]of t)if(r.length>1){r.sort((i,l)=>new Date(l.uploadDate).getTime()-new Date(i.uploadDate).getTime());const n=r.slice(1);for(const i of n)await e.books.delete(i.id),await e.characters.where("bookId").equals(i.id).delete();console&&console.log&&console.log("SafeBookOperations: Cleaned up",n.length,"duplicates of:",a)}}catch(o){console&&console.error&&console.error("SafeBookOperations: Emergency cleanup failed:",o)}}}export{p as SafeBookOperations};
