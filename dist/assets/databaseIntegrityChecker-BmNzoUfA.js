import{d as a}from"./index-lvCD0g3k.js";class i{static async checkDatabaseHealth(){try{const e=await a.books.toArray();console&&console.log&&console.log("DatabaseIntegrityChecker: Database accessible, found",e.length,"books");let o=0;for(const t of e)(!t.id||!t.title||!t.fileName)&&o++;return o>0?(console&&console.warn&&console.warn("DatabaseIntegrityChecker: Found",o,"corrupted books"),!1):!0}catch(e){return console&&console.error&&console.error("DatabaseIntegrityChecker: Database health check failed:",e),!1}}static async verifyBookExists(e){if(!e)return null;try{for(let o=0;o<3;o++){const t=await a.books.get(e);if(t)return t;await new Promise(r=>setTimeout(r,200*(o+1)))}return null}catch(o){return console&&console.error&&console.error("DatabaseIntegrityChecker: Error verifying book:",o),null}}static async findBookByAlternatives(e){try{const o=await a.books.toArray();if(e.fileName){const t=o.find(r=>r.fileName===e.fileName);if(t)return console&&console.log&&console.log("DatabaseIntegrityChecker: Found book by filename"),t}if(e.title&&e.author){const t=o.find(r=>r.title===e.title&&r.author===e.author);if(t)return console&&console.log&&console.log("DatabaseIntegrityChecker: Found book by title/author"),t}return null}catch(o){return console&&console.error&&console.error("DatabaseIntegrityChecker: Error finding book by alternatives:",o),null}}static async waitForDatabaseSettle(e=2e3){const o=Date.now();for(;Date.now()-o<e;)try{await a.books.count(),await new Promise(t=>setTimeout(t,100));return}catch{await new Promise(r=>setTimeout(r,100))}}}export{i as DatabaseIntegrityChecker};
